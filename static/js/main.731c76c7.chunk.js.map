{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","api/posts.ts","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["PostsList","React","memo","posts","handlePostDetailsId","isPostsId","className","map","post","id","title","type","cn","onClick","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","getComments","NewCommentForm","setComments","postId","useState","name","setName","email","setEmail","setBody","checkFieldName","setCheckFieldName","checkFieldEmail","setCheckFieldEmail","checkFieldBody","setCheckFieldBody","isLoading","setIsLoading","error","setError","nameTrim","trim","emailTrim","bodyTrim","handleCommentFormSubmit","event","a","preventDefault","newComment","loadComment","state","onSubmit","htmlFor","placeholder","value","onChange","target","PostDetails","isLoadingPost","comments","wrtCommentBtnClk","handleWrtCommentBtnClk","handleCommentDelete","length","comment","href","UserSelector","users","choosenUser","handleChoosenUser","handlePickerClick","isPickerOpen","role","user","App","setUsers","setPosts","setIsPickerOpen","isLoadingPosts","setIsLoadingPosts","setIsLoadingPost","isErrorPosts","setIsErrorPosts","isErrorPost","setIsErrorPost","isPosts","setIsPosts","setChoosenUser","setIsPostsId","setWrtCommentBtnClk","loadUsers","loadingUsers","useEffect","loadingPosts","visiblePost","useMemo","find","postO","loadingComment","classNames","deleteComment","filter","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.731c76c7.chunk.js","sourcesContent":["import React from 'react';\nimport cn from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Prop = {\n  posts: Post[] | null,\n  handlePostDetailsId: (id: number) => void,\n  isPostsId: number | null,\n};\n\nexport const PostsList: React.FC<Prop> = React.memo(({\n  posts,\n  handlePostDetailsId,\n  isPostsId,\n}) => (\n  <div\n    data-cy=\"PostsList\"\n  >\n    <p className=\"title\">Posts:</p>\n    <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n      <thead>\n        <tr className=\"has-background-link-light\">\n          <th>#</th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {posts?.map(post => (\n          <tr key={post.id} data-cy=\"Post\">\n            <td data-cy=\"PostId\">{post.id}</td>\n\n            <td data-cy=\"PostTitle\">\n              {post.title}\n            </td>\n\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                type=\"button\"\n                data-cy=\"PostButton\"\n                className={cn(\n                  'button',\n                  'is-link',\n                  { 'is-light': isPostsId === post.id },\n                )}\n                onClick={() => {\n                  handlePostDetailsId(post.id);\n                }}\n              >\n                {isPostsId === post.id ? (\n                  'close'\n                ) : (\n                  'open'\n                )}\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  </div>\n));\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import { Post } from '../types/Post';\nimport { User } from '../types/User';\nimport { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n\nexport const getPosts = (id: number | null) => {\n  return client.get<Post[]>(`/posts?userId=${id}`);\n};\n\nexport const getPost = (id: number | null) => {\n  return client.get<Post>(`/posts/${id}`);\n};\n\nexport const getComments = (id: number | null) => {\n  return client.get<Comment>(`/comments?postId=${id}`);\n};\n\nexport const deleteComment = (id: number) => {\n  return client.delete(`/comments/${id}`);\n};\n\nexport const addComment = (data: any) => {\n  return client.post('/comments', data);\n};\n","import cn from 'classnames';\nimport React, { FormEvent, useState } from 'react';\nimport { Comment } from '../types/Comment';\nimport { addComment } from '../api/posts';\n\ntype Props = {\n  postId: number | undefined,\n  setComments: (comment: any) => void,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  setComments,\n  postId,\n}) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n  const [checkFieldName, setCheckFieldName] = useState(false);\n  const [checkFieldEmail, setCheckFieldEmail] = useState(false);\n  const [checkFieldBody, setCheckFieldBody] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  const handleErrorSet = (errMessage: string) => {\n    setError(errMessage);\n    setTimeout(() => {\n      setError('');\n    }, 3000);\n  };\n\n  const handleClear = () => {\n    setName('');\n    setEmail('');\n    setBody('');\n    setCheckFieldName(false);\n    setCheckFieldEmail(false);\n    setCheckFieldBody(false);\n  };\n\n  const nameTrim = name.trim();\n  const emailTrim = email.trim();\n  const bodyTrim = body.trim();\n\n  const handleCommentFormSubmit = async (event?: FormEvent) => {\n    event?.preventDefault();\n    setCheckFieldName(true);\n    setCheckFieldEmail(true);\n    setCheckFieldBody(true);\n\n    if (\n      !nameTrim\n      || !emailTrim\n      || !bodyTrim\n    ) {\n      return;\n    }\n\n    try {\n      setIsLoading(true);\n      const newComment = {\n        postId,\n        name,\n        email,\n        body,\n      };\n\n      const loadComment = await addComment(newComment);\n\n      setComments((state: Comment[]) => {\n        return [...state, loadComment];\n      });\n      setCheckFieldBody(false);\n      setBody('');\n    } catch {\n      handleErrorSet('something went wrong');\n    }\n\n    setIsLoading(false);\n  };\n\n  return (\n    <>\n\n      <div>\n        {error}\n      </div>\n      <form\n        data-cy=\"NewCommentForm\"\n        onSubmit={handleCommentFormSubmit}\n      >\n        <div className=\"field\" data-cy=\"NameField\">\n          <label className=\"label\" htmlFor=\"comment-author-name\">\n            Author Name\n          </label>\n\n          <div className=\"control has-icons-left has-icons-right\">\n            <input\n              type=\"text\"\n              name=\"name\"\n              id=\"comment-author-name\"\n              placeholder=\"Name Surname\"\n              className={cn('input',\n                {\n                  'is-danger': !nameTrim && checkFieldName,\n                })}\n              value={name}\n              onChange={(event) => {\n                setCheckFieldName(false);\n                setName(event.target.value);\n              }}\n            />\n\n            <span className=\"icon is-small is-left\">\n              <i className=\"fas fa-user\" />\n            </span>\n            {!nameTrim && checkFieldName && (\n              <span\n                className=\"icon is-small is-right has-text-danger\"\n                data-cy=\"ErrorIcon\"\n              >\n                <i className=\"fas fa-exclamation-triangle\" />\n              </span>\n            )}\n          </div>\n          {!nameTrim && checkFieldName && (\n            <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n              Name is required\n            </p>\n          )}\n        </div>\n\n        <div className=\"field\" data-cy=\"EmailField\">\n          <label className=\"label\" htmlFor=\"comment-author-email\">\n            Author Email\n          </label>\n\n          <div className=\"control has-icons-left has-icons-right\">\n            <input\n              type=\"text\"\n              name=\"email\"\n              id=\"comment-author-email\"\n              placeholder=\"email@test.com\"\n              className={cn('input',\n                {\n                  'is-danger': !emailTrim && checkFieldEmail,\n                })}\n              value={email}\n              onChange={(event) => {\n                setCheckFieldEmail(false);\n                setEmail(event.target.value);\n              }}\n            />\n\n            <span className=\"icon is-small is-left\">\n              <i className=\"fas fa-envelope\" />\n            </span>\n            {!emailTrim && checkFieldEmail && (\n              <span\n                className=\"icon is-small is-right has-text-danger\"\n                data-cy=\"ErrorIcon\"\n              >\n                <i className=\"fas fa-exclamation-triangle\" />\n              </span>\n            )}\n          </div>\n          {!emailTrim && checkFieldEmail && (\n            <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n              Email is required\n            </p>\n          )}\n        </div>\n\n        <div className=\"field\" data-cy=\"BodyField\">\n          <label className=\"label\" htmlFor=\"comment-body\">\n            Comment Text\n          </label>\n\n          <div className=\"control\">\n            <textarea\n              id=\"comment-body\"\n              name=\"body\"\n              placeholder=\"Type comment here\"\n              className={cn('input',\n                {\n                  'is-danger': !bodyTrim && checkFieldBody,\n                })}\n              value={body}\n              onChange={(event) => {\n                setCheckFieldBody(false);\n                setBody(event.target.value);\n              }}\n            />\n          </div>\n          {!bodyTrim && checkFieldBody && (\n            <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n              Enter some text\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              type=\"submit\"\n              className={cn(\n                'button',\n                'is-link',\n                { 'is-loading': isLoading },\n              )}\n            >\n              Add\n            </button>\n          </div>\n\n          <div className=\"control\">\n            {/* eslint-disable-next-line react/button-has-type */}\n            <button\n              type=\"reset\"\n              className=\"button is-link is-light\"\n              onClick={handleClear}\n            >\n              Clear\n            </button>\n          </div>\n        </div>\n      </form>\n    </>\n  );\n};\n","import React from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\n\ntype Props = {\n  post: Post | undefined,\n  error: boolean,\n  isLoadingPost: boolean,\n  comments: Comment[],\n  setComments: (comments: Comment[]) => void,\n  wrtCommentBtnClk: boolean,\n  handleWrtCommentBtnClk: () => void;\n  handleCommentDelete: (id: number) => void;\n};\n\nexport const PostDetails: React.FC<Props> = React.memo(({\n  post,\n  error,\n  isLoadingPost,\n  comments,\n  wrtCommentBtnClk,\n  handleWrtCommentBtnClk,\n  handleCommentDelete,\n  setComments,\n}) => {\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {post?.title}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {post?.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoadingPost && (\n            <Loader />\n          )}\n          {error && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          <p className=\"title is-4\">Comments:</p>\n\n          {!comments.length ? (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          ) : (\n            comments.map(comment => (\n              <article\n                key={comment.id}\n                className=\"message is-small\"\n                data-cy=\"Comment\"\n              >\n                <div className=\"message-header\">\n                  <a href={comment.email} data-cy=\"CommentAuthor\">\n                    {comment.name}\n                  </a>\n                  <button\n                    data-cy=\"CommentDelete\"\n                    type=\"button\"\n                    className=\"delete is-small\"\n                    aria-label=\"delete\"\n                    onClick={() => {\n                      handleCommentDelete(comment.id);\n                    }}\n                  >\n                    delete button\n                  </button>\n                </div>\n                <div className=\"message-body\" data-cy=\"CommentBody\">\n                  {comment.body}\n                </div>\n              </article>\n            ))\n          )}\n          {!wrtCommentBtnClk && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => {\n                handleWrtCommentBtnClk();\n              }}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {wrtCommentBtnClk && (\n          <NewCommentForm\n            setComments={setComments}\n            postId={post?.id}\n          />\n        )}\n      </div>\n    </div>\n  );\n});\n","import React from 'react';\nimport cn from 'classnames';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[] | null,\n  choosenUser: User | null,\n  handleChoosenUser: (user: User) => void,\n  handlePickerClick: () => void,\n  isPickerOpen: boolean;\n};\n\nexport const UserSelector: React.FC<Props> = React.memo(({\n  users,\n  choosenUser,\n  handleChoosenUser,\n  handlePickerClick,\n  isPickerOpen,\n}) => {\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className=\"dropdown is-active\"\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => {\n            handlePickerClick();\n          }}\n        >\n          {choosenUser ? (\n            <span>{choosenUser.name}</span>\n          ) : (\n            <span>Choose a user</span>\n          )}\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n      {isPickerOpen && (\n        <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n          <div\n            className=\"dropdown-content\"\n          >\n            {users?.map(user => {\n              return (\n                <a\n                  key={user.id}\n                  href=\"#user-1\"\n                  className={cn('dropdown-item', {\n                    'is-active': user.name === choosenUser?.name,\n                  })}\n                  onClick={() => {\n                    handleChoosenUser(user);\n                  }}\n                >\n                  {user.name}\n                </a>\n              );\n            })}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n});\n","import React, {\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport {\n  deleteComment,\n  getComments,\n  getPosts,\n  getUsers,\n} from './api/posts';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { Comment } from './types/Comment';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[] | null>(null);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [isPickerOpen, setIsPickerOpen] = useState(false);\n  const [isLoadingPosts, setIsLoadingPosts] = useState(false);\n  const [isLoadingPost, setIsLoadingPost] = useState(false);\n  const [isErrorPosts, setIsErrorPosts] = useState(false);\n  const [isErrorPost, setIsErrorPost] = useState(false);\n  const [isPosts, setIsPosts] = useState(false);\n  const [choosenUser, setChoosenUser] = useState<User | null>(null);\n  const [isPostsId, setIsPostsId] = useState<number | null>(null);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [wrtCommentBtnClk, setWrtCommentBtnClk] = useState(false);\n\n  const loadUsers = async () => {\n    const loadingUsers = await getUsers();\n\n    setUsers(loadingUsers);\n  };\n\n  useEffect(() => {\n    loadUsers();\n  }, []);\n\n  const handlePickerClick = () => {\n    setIsPickerOpen(state => !state);\n  };\n\n  const handleChoosenUser = async (user: User) => {\n    setIsPostsId(null);\n\n    try {\n      setWrtCommentBtnClk(false);\n      setIsPosts(false);\n      setIsErrorPosts(false);\n      setIsLoadingPosts(true);\n      setIsPickerOpen(false);\n      setChoosenUser(user);\n      const loadingPosts = await getPosts(user.id);\n\n      setPosts(() => {\n        return [...loadingPosts as Post[]];\n      });\n      setIsLoadingPosts(false);\n      if (!loadingPosts?.length) {\n        setIsPosts(true);\n      }\n    } catch {\n      setIsLoadingPosts(false);\n      setIsErrorPosts(true);\n    }\n  };\n\n  const visiblePost = useMemo(() => {\n    return posts.find(postO => postO.id === isPostsId);\n  }, [isPostsId, posts]);\n\n  const handlePostDetailsId = async (id: number | null) => {\n    setWrtCommentBtnClk(false);\n\n    if (id === isPostsId) {\n      setIsPostsId(null);\n      setComments([]);\n    } else {\n      setIsPostsId(id);\n      try {\n        setComments([]);\n        setIsLoadingPost(true);\n        const loadingComment: unknown = await getComments(id);\n\n        setComments(() => {\n          return [...loadingComment as Comment[]];\n        });\n        setIsLoadingPost(false);\n      } catch {\n        setIsErrorPost(true);\n      }\n    }\n  };\n\n  const handleWrtCommentBtnClk = () => {\n    setWrtCommentBtnClk(true);\n  };\n\n  const handleCommentDelete = (id: number) => {\n    try {\n      deleteComment(id);\n\n      setComments(state => {\n        return [...state.filter(comment => comment.id !== id)];\n      });\n    } catch {\n      setIsErrorPosts(true);\n    }\n  };\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  choosenUser={choosenUser}\n                  handleChoosenUser={handleChoosenUser}\n                  handlePickerClick={handlePickerClick}\n                  isPickerOpen={isPickerOpen}\n                />\n              </div>\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!choosenUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n                {isLoadingPosts && (\n                  <Loader />\n                )}\n\n                {isErrorPosts && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {isPosts && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n\n                {!!posts?.length && (\n                  <PostsList\n                    posts={posts}\n                    handlePostDetailsId={handlePostDetailsId}\n                    isPostsId={isPostsId}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': isPostsId },\n            )}\n          >\n            {isPostsId && (\n              <div className=\"tile is-child box is-success \">\n                <PostDetails\n                  post={visiblePost}\n                  error={isErrorPost}\n                  isLoadingPost={isLoadingPost}\n                  comments={comments}\n                  handleWrtCommentBtnClk={handleWrtCommentBtnClk}\n                  wrtCommentBtnClk={wrtCommentBtnClk}\n                  handleCommentDelete={handleCommentDelete}\n                  setComments={setComments}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}