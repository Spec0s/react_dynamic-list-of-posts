{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","components/NewCommentForm.tsx","api/posts.ts","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["PostsList","React","memo","posts","handlePostSelect","selectedPostId","className","map","post","id","title","type","cn","onClick","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","NewCommentForm","setComments","postId","useState","name","setName","email","setEmail","setBody","checkFieldName","setCheckFieldName","checkFieldEmail","setCheckFieldEmail","checkFieldBody","setCheckFieldBody","isLoading","setIsLoading","error","setError","handleClear","useEffect","nameTrim","trim","emailTrim","bodyTrim","handleCommentFormSubmit","event","a","preventDefault","newComment","loadComment","state","onSubmit","htmlFor","placeholder","value","onChange","target","PostDetails","setIsError","comments","writeCommentButtonClick","setWriteCommentButtonClick","loadComments","loadingUsers","handleCommentDelete","deleteComment","filter","comment","length","href","UserSelector","users","choosenUser","handleUserSelect","isPickerOpen","setIsPickerOpen","role","user","App","setUsers","setPosts","isError","setChoosenUser","selectedPost","setSelectedPost","loadUsers","loadPosts","loadingPosts","classNames","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.81bf872b.chunk.js","sourcesContent":["import React from 'react';\nimport cn from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Prop = {\n  posts: Post[] | null,\n  handlePostSelect: (post: Post) => void,\n  selectedPostId: number,\n};\n\nexport const PostsList: React.FC<Prop> = React.memo(({\n  posts,\n  handlePostSelect,\n  selectedPostId,\n}) => (\n  <div\n    data-cy=\"PostsList\"\n  >\n    <p className=\"title\">Posts:</p>\n    <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n      <thead>\n        <tr className=\"has-background-link-light\">\n          <th>#</th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {posts?.map(post => {\n          const { id, title } = post;\n\n          return (\n            <tr key={id} data-cy=\"Post\">\n              <td data-cy=\"PostId\">{id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={cn(\n                    'button',\n                    'is-link',\n                    { 'is-light': selectedPostId === id },\n                  )}\n                  onClick={() => handlePostSelect(post)}\n                >\n                  {selectedPostId === id ? (\n                    'close'\n                  ) : (\n                    'open'\n                  )}\n                </button>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  </div>\n));\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import cn from 'classnames';\nimport React, { FormEvent, useEffect, useState } from 'react';\nimport { Comment } from '../types/Comment';\nimport { addComment } from '../api/posts';\n\ntype Props = {\n  postId: number | undefined,\n  setComments: React.Dispatch<React.SetStateAction<Comment[] | null>>,\n};\n\nexport const NewCommentForm: React.FC<Props> = React.memo(({\n  setComments,\n  postId,\n}) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n  const [checkFieldName, setCheckFieldName] = useState(false);\n  const [checkFieldEmail, setCheckFieldEmail] = useState(false);\n  const [checkFieldBody, setCheckFieldBody] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  const handleErrorSet = (errMessage: string) => {\n    setError(errMessage);\n    setTimeout(() => {\n      setError('');\n    }, 3000);\n  };\n\n  const handleClear = () => {\n    setName('');\n    setEmail('');\n    setBody('');\n    setCheckFieldName(false);\n    setCheckFieldEmail(false);\n    setCheckFieldBody(false);\n  };\n\n  useEffect(() => {\n    handleClear();\n  }, [postId]);\n\n  const nameTrim = name.trim();\n  const emailTrim = email.trim();\n  const bodyTrim = body.trim();\n\n  const handleCommentFormSubmit = async (event?: FormEvent) => {\n    event?.preventDefault();\n    setCheckFieldName(true);\n    setCheckFieldEmail(true);\n    setCheckFieldBody(true);\n\n    if (\n      !nameTrim\n      || !emailTrim\n      || !bodyTrim\n    ) {\n      return;\n    }\n\n    try {\n      setIsLoading(true);\n      const newComment = {\n        postId,\n        name,\n        email,\n        body,\n      };\n\n      const loadComment = await addComment(newComment);\n\n      setComments((state) => {\n        if (state) {\n          return [...state, loadComment];\n        }\n\n        return [loadComment];\n      });\n      setCheckFieldBody(false);\n      setBody('');\n    } catch {\n      handleErrorSet('something went wrong');\n    }\n\n    setIsLoading(false);\n  };\n\n  return (\n    <>\n      <div>\n        {error}\n      </div>\n      <form\n        data-cy=\"NewCommentForm\"\n        onSubmit={handleCommentFormSubmit}\n      >\n        <div className=\"field\" data-cy=\"NameField\">\n          <label className=\"label\" htmlFor=\"comment-author-name\">\n            Author Name\n          </label>\n\n          <div className=\"control has-icons-left has-icons-right\">\n            <input\n              type=\"text\"\n              name=\"name\"\n              id=\"comment-author-name\"\n              placeholder=\"Name Surname\"\n              className={cn('input',\n                {\n                  'is-danger': !nameTrim && checkFieldName,\n                })}\n              value={name}\n              onChange={(event) => {\n                setCheckFieldName(false);\n                setName(event.target.value);\n              }}\n            />\n\n            <span className=\"icon is-small is-left\">\n              <i className=\"fas fa-user\" />\n            </span>\n            {!nameTrim && checkFieldName && (\n              <span\n                className=\"icon is-small is-right has-text-danger\"\n                data-cy=\"ErrorIcon\"\n              >\n                <i className=\"fas fa-exclamation-triangle\" />\n              </span>\n            )}\n          </div>\n          {!nameTrim && checkFieldName && (\n            <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n              Name is required\n            </p>\n          )}\n        </div>\n\n        <div className=\"field\" data-cy=\"EmailField\">\n          <label className=\"label\" htmlFor=\"comment-author-email\">\n            Author Email\n          </label>\n\n          <div className=\"control has-icons-left has-icons-right\">\n            <input\n              type=\"text\"\n              name=\"email\"\n              id=\"comment-author-email\"\n              placeholder=\"email@test.com\"\n              className={cn('input',\n                {\n                  'is-danger': !emailTrim && checkFieldEmail,\n                })}\n              value={email}\n              onChange={(event) => {\n                setCheckFieldEmail(false);\n                setEmail(event.target.value);\n              }}\n            />\n\n            <span className=\"icon is-small is-left\">\n              <i className=\"fas fa-envelope\" />\n            </span>\n            {!emailTrim && checkFieldEmail && (\n              <span\n                className=\"icon is-small is-right has-text-danger\"\n                data-cy=\"ErrorIcon\"\n              >\n                <i className=\"fas fa-exclamation-triangle\" />\n              </span>\n            )}\n          </div>\n          {!emailTrim && checkFieldEmail && (\n            <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n              Email is required\n            </p>\n          )}\n        </div>\n\n        <div className=\"field\" data-cy=\"BodyField\">\n          <label className=\"label\" htmlFor=\"comment-body\">\n            Comment Text\n          </label>\n\n          <div className=\"control\">\n            <textarea\n              id=\"comment-body\"\n              name=\"body\"\n              placeholder=\"Type comment here\"\n              className={cn('input',\n                {\n                  'is-danger': !bodyTrim && checkFieldBody,\n                })}\n              value={body}\n              onChange={(event) => {\n                setCheckFieldBody(false);\n                setBody(event.target.value);\n              }}\n            />\n          </div>\n          {!bodyTrim && checkFieldBody && (\n            <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n              Enter some text\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              type=\"submit\"\n              className={cn(\n                'button',\n                'is-link',\n                { 'is-loading': isLoading },\n              )}\n            >\n              Add\n            </button>\n          </div>\n\n          <div className=\"control\">\n            {/* eslint-disable-next-line react/button-has-type */}\n            <button\n              type=\"reset\"\n              className=\"button is-link is-light\"\n              onClick={handleClear}\n            >\n              Clear\n            </button>\n          </div>\n        </div>\n      </form>\n    </>\n  );\n});\n","import { Post } from '../types/Post';\nimport { User } from '../types/User';\nimport { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n\nexport const getPosts = (id: number | null) => {\n  return client.get<Post[]>(`/posts?userId=${id}`);\n};\n\nexport const getPost = (id: number | null) => {\n  return client.get<Post>(`/posts/${id}`);\n};\n\nexport const getComments = (id: number | null) => {\n  return client.get<Comment[]>(`/comments?postId=${id}`);\n};\n\nexport const deleteComment = (id: number) => {\n  return client.delete(`/comments/${id}`);\n};\n\nexport const addComment = (data: any) => {\n  return client.post<Comment>('/comments', data);\n};\n","import React, {\n  useEffect,\n  useState,\n} from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\nimport { deleteComment, getComments } from '../api/posts';\n\ntype Props = {\n  post: Post,\n  setIsError: (error: boolean) => void,\n  error: boolean,\n};\n\nexport const PostDetails: React.FC<Props> = React.memo(({\n  post,\n  setIsError,\n  error,\n}) => {\n  const [comments, setComments] = useState<Comment[] | null>(null);\n  const [writeCommentButtonClick, setWriteCommentButtonClick] = useState(false);\n\n  const loadComments = async () => {\n    const loadingUsers = await getComments(post.id);\n\n    setComments(loadingUsers);\n  };\n\n  useEffect(() => {\n    setComments(null);\n    loadComments();\n    setWriteCommentButtonClick(false);\n  }, [post.id]);\n\n  const handleCommentDelete = (id: number) => {\n    setIsError(false);\n    try {\n      deleteComment(id);\n\n      setComments(state => {\n        if (state) {\n          return [...state.filter(comment => comment.id !== id)];\n        }\n\n        return [];\n      });\n    } catch {\n      setIsError(true);\n    }\n  };\n\n  const handleWriteCommentButtonClick = () => {\n    setWriteCommentButtonClick(true);\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {post?.title}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {post?.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {!comments ? (\n            <Loader />\n          ) : (\n            <>\n              {error && (\n                <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n                  Something went wrong\n                </div>\n              )}\n\n              <p className=\"title is-4\">Comments:</p>\n\n              {!comments?.length ? (\n                <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                  No comments yet\n                </p>\n              ) : (\n                comments?.map(comment => {\n                  const {\n                    id,\n                    email,\n                    name,\n                    body,\n                  } = comment;\n\n                  return (\n                    <article\n                      key={id}\n                      className=\"message is-small\"\n                      data-cy=\"Comment\"\n                    >\n                      <div className=\"message-header\">\n                        <a href={email} data-cy=\"CommentAuthor\">\n                          {name}\n                        </a>\n                        <button\n                          data-cy=\"CommentDelete\"\n                          type=\"button\"\n                          className=\"delete is-small\"\n                          aria-label=\"delete\"\n                          onClick={() => handleCommentDelete(id)}\n                        >\n                          delete button\n                        </button>\n                      </div>\n                      <div className=\"message-body\" data-cy=\"CommentBody\">\n                        {body}\n                      </div>\n                    </article>\n                  );\n                })\n              )}\n            </>\n          )}\n          {!writeCommentButtonClick && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => handleWriteCommentButtonClick()}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {writeCommentButtonClick && (\n          <NewCommentForm\n            setComments={setComments}\n            postId={post?.id}\n          />\n        )}\n      </div>\n    </div>\n  );\n});\n","import React, { useState } from 'react';\nimport cn from 'classnames';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[],\n  choosenUser: User | null,\n  handleUserSelect: (user: User) => void,\n  // handlePickerClick: () => void,\n  // isPickerOpen: boolean;\n};\n\nexport const UserSelector: React.FC<Props> = React.memo(({\n  users,\n  choosenUser,\n  handleUserSelect,\n  // handlePickerClick,\n  // isPickerOpen,\n}) => {\n  const [isPickerOpen, setIsPickerOpen] = useState<boolean>(false);\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className=\"dropdown is-active\"\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => {\n            setIsPickerOpen((state) => !state);\n          }}\n        >\n          {choosenUser ? (\n            <span>{choosenUser.name}</span>\n          ) : (\n            <span>Choose a user</span>\n          )}\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n      {isPickerOpen && (\n        <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n          <div\n            className=\"dropdown-content\"\n          >\n            {users.map(user => {\n              return (\n                <a\n                  key={user.id}\n                  href=\"#user-1\"\n                  className={cn('dropdown-item', {\n                    'is-active': user.name === choosenUser?.name,\n                  })}\n                  onClick={() => {\n                    handleUserSelect(user);\n                    setIsPickerOpen(false);\n                  }}\n                >\n                  {user.name}\n                </a>\n              );\n            })}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n});\n","import React, {\n  useEffect,\n  useState,\n} from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport {\n  getPosts,\n  getUsers,\n} from './api/posts';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [posts, setPosts] = useState<Post[] | null>(null);\n  const [isError, setIsError] = useState(false);\n  const [choosenUser, setChoosenUser] = useState<User | null>(null);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n\n  const loadUsers = async () => {\n    const loadingUsers = await getUsers();\n\n    setUsers(loadingUsers);\n  };\n\n  const loadPosts = async () => {\n    if (choosenUser) {\n      const loadingPosts = await getPosts(choosenUser.id);\n\n      setPosts(loadingPosts);\n    }\n  };\n\n  useEffect(() => {\n    loadUsers();\n  }, []);\n\n  useEffect(() => {\n    setPosts(null);\n    setIsError(false);\n    loadPosts();\n  }, [choosenUser]);\n\n  const handleUserSelect = (user: User) => {\n    setSelectedPost(null);\n    setChoosenUser(user);\n  };\n\n  const handlePostSelect = (post: Post) => {\n    if (selectedPost?.id === post.id) {\n      setSelectedPost(null);\n    } else {\n      setSelectedPost(post);\n    }\n  };\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  choosenUser={choosenUser}\n                  handleUserSelect={handleUserSelect}\n                />\n              </div>\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!choosenUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n                {!posts && choosenUser && (\n                  <Loader />\n                )}\n\n                {isError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {!posts?.length && posts !== null && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n\n                {!!posts?.length && (\n                  <PostsList\n                    posts={posts}\n                    handlePostSelect={handlePostSelect}\n                    selectedPostId={selectedPost?.id || 0}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPost?.id },\n            )}\n          >\n            {selectedPost && (\n              <div className=\"tile is-child box is-success \">\n                <PostDetails\n                  post={selectedPost}\n                  setIsError={setIsError}\n                  error={isError}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}